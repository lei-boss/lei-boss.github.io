<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringSecurity个人学习笔记</title>
    <url>/2022/01/12/SpringSecurity/</url>
    <content><![CDATA[<hr>
<p><strong>注：本文内容来自bilibili,UP主<span style="color: red;">三更草堂</span><br>B站： <a href="https://space.bilibili.com/663528522">https://space.bilibili.com/663528522</a><br>大家多多给他三连。</strong><br>个人学习后做的笔记，记录一些知识点。</p>
<hr>
<span id="more"></span>
<h2 id="SpringSecurity是什么"><a href="#SpringSecurity是什么" class="headerlink" title="SpringSecurity是什么"></a>SpringSecurity是什么</h2><p>​    <strong>Spring Security</strong> 是 Spring 中的一个安全管理框架。相比与另外一个安全框架<strong>Shiro</strong>，它提供了更丰富的功能，社区资源也比Shiro丰富。</p>
<p>​    一般来说中大型的项目都是使用<strong>SpringSecurity</strong> 来做安全框架。小项目有Shiro的比较多，因为相比与SpringSecurity，Shiro的上手更加的简单。</p>
<p>​     一般Web应用的需要进行<strong>认证</strong>和<strong>授权</strong>。</p>
<p>​        <strong>认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</strong></p>
<p>​        <strong>授权：经过认证后判断当前用户是否有权限进行某个操作</strong></p>
<p>​    而认证和授权也是SpringSecurity作为安全框架的核心功能。</p>
<hr>
<h2 id="1-SpringSecurity环境搭建"><a href="#1-SpringSecurity环境搭建" class="headerlink" title="1.SpringSecurity环境搭建"></a>1.SpringSecurity环境搭建</h2><h3 id="1-1-工程创建"><a href="#1-1-工程创建" class="headerlink" title="1.1 工程创建"></a>1.1 工程创建</h3><ul>
<li><p>搭建一个Maven工程,在idea中点击左上角File—&gt;New—&gt;Module.<br><img src="/images/1.png"></p>
</li>
<li><p>然后左边列表中选择Maven，选中Create from archetype,然后点击Next.<br><img src="/images/2.png"></p>
</li>
<li><p>然后输入项目的文件名，然后是选择存放的路径,点开Artifct Coordinates.</p>
</li>
<li><p>GroupId是最好以org.随便起个好记的名</p>
</li>
<li><p>ArtifctId和你上面的Name名一样</p>
</li>
<li><p>Version 和我这个一样就行，测试版。想用正式版也行。需要了解的自行百度</p>
</li>
<li><p>然后点击finish创建<br><img src="/images/3.png"></p>
</li>
</ul>
<h3 id="1-2-添加依赖"><a href="#1-2-添加依赖" class="headerlink" title="1.2 添加依赖"></a>1.2 添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--lombok,去除繁琐的get,set等等--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>然后在如下图选中的模块创建springboot启动类<br><img src="/images/4.png"></li>
</ul>
<p>① 创建启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityRun</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringSecurityRun.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>② 创建Controller(为了方便,在启动类同级目录下创建一个名为controller的包，在此包下创建此类)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HellController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎光临&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;牛马集团&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>③ 启动项目，测试一个这个接口是否可用。<br>到此springboot已经创建好了</p>
<h3 id="1-3-引入SpringSecurity的依赖"><a href="#1-3-引入SpringSecurity的依赖" class="headerlink" title="1.3 引入SpringSecurity的依赖"></a>1.3 引入SpringSecurity的依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>加入SpringSecurity的依赖后再去访问项目中任意接口会自动跳转到springsecurity的登录页，只有登录了才能访问接口)<br>默认的登录用户名是：user,密码会在控制台打印！<br>只有登陆之后才能对接口进行访问。</p>
<h2 id="2-SpringSecurity的认证"><a href="#2-SpringSecurity的认证" class="headerlink" title="2. SpringSecurity的认证"></a>2. SpringSecurity的认证</h2><h3 id="2-1-登陆校验流程"><a href="#2-1-登陆校验流程" class="headerlink" title="2.1 登陆校验流程"></a>2.1 登陆校验流程</h3><p><img src="/images/5.png"></p>
<h3 id="2-2-需要实现的步骤"><a href="#2-2-需要实现的步骤" class="headerlink" title="2.2 需要实现的步骤"></a>2.2 需要实现的步骤</h3><p>登录</p>
<p>​    ①自定义登录接口  </p>
<p>​                调用ProviderManager的方法进行认证 如果认证通过生成jwt</p>
<p>​                把用户信息存入redis中</p>
<p>​    ②自定义UserDetailsService </p>
<p>​                在这个实现类中去查询数据库</p>
<p>校验：</p>
<p>​    ①定义Jwt认证过滤器</p>
<p>​                获取token</p>
<p>​                解析token获取其中的userid</p>
<p>​                从redis中获取用户信息</p>
<p>​                存入SecurityContextHolder</p>
<h3 id="2-3-准备工作"><a href="#2-3-准备工作" class="headerlink" title="2.3 准备工作"></a>2.3 准备工作</h3><p>① 添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">      <span class="comment">&lt;!--redis依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--fastjson依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--jwt依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--mybatis-plus依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mysql依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p><span style="color: greenyellow;"><strong>各种配置类太多了没贴出来，太懒了。</strong></span></p>
<hr>
<p>② 配置数据库信息</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/security?characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<p>​        定义Mapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        修改User实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类名上加<span class="meta">@TableName(value = &quot;sys_user&quot;)</span> ,id字段上加 <span class="meta">@TableId</span></span><br></pre></td></tr></table></figure>

<p>​        配置Mapper扫描</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.leixuyang.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityRun</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringSecurityRun.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4创建一个类实现UserDetailsService接口"><a href="#2-4创建一个类实现UserDetailsService接口" class="headerlink" title="2.4创建一个类实现UserDetailsService接口"></a>2.4创建一个类实现UserDetailsService接口</h3><ul>
<li>重写其中的方法。增加用户名从数据库中查询用户信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 根据用户名查询用户信息</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(User::getUserName,s);</span><br><span class="line">        User user = userMapper.selectOne(wrapper);</span><br><span class="line">        <span class="comment">// 如果查询不到数据就通过抛异常来给出提示</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;用户名或者密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装成UserDetails对象返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为UserDetailsService方法的返回值是UserDetails类型，所以需要定义一个类，实现该接口，把用户信息封装在其中。</p>
<h3 id="2-5-创建一个类实现UserDetails接口"><a href="#2-5-创建一个类实现UserDetails接口" class="headerlink" title="2.5 创建一个类实现UserDetails接口"></a>2.5 创建一个类实现UserDetails接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="comment">// 重写了security中和数据库校验的那个类中的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginUser</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取权限信息（目前我还没写权限信息所有设置为null）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getUserName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否没过期</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否没被锁定</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否没超时</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否可用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：如果要测试，需要往用户表中写入用户数据，并且如果你想让用户的密码是明文存储，需要在密码前加{noop}。例如<br>！<a href="/images/6.png"></a></p>
<h3 id="2-6-密码加密存储"><a href="#2-6-密码加密存储" class="headerlink" title="2.6 密码加密存储"></a>2.6 密码加密存储</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为原来那个密码校验是需要在数据库中密码前面加上&#123;noop&#125;才可以明文显示的,</span></span><br><span class="line"><span class="comment">// 默认用的是PasswordEncoder,密码格式为：&#123;id&#125;password .</span></span><br><span class="line"><span class="comment">// 所有这里换成了它自带的另一种加密密码方式</span></span><br><span class="line"><span class="comment">// 替换为BCryptPasswordEncoder</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//快捷键alt+insert然后选择Override Methods可以看到这里支持重写的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把它自带的另一种密码加密方式注入到spring容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-7-登陆接口"><a href="#2-7-登陆接口" class="headerlink" title="2.7 登陆接口"></a>2.7 登陆接口</h3><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginServcie loginServcie;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loginServcie.login(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>config</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/login&quot;</span>).anonymous()</span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>service中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title">LoginService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录的方法实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">login</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//AuthenticationManager authenticate进行用户认证</span></span><br><span class="line">        UsernamePasswordAuthenticationToken authenticationToken = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(user.getUserName(),user.getPassword());</span><br><span class="line">        Authentication authenticate = authenticationManager.authenticate(authenticationToken);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果认证没通过，给出对应的提示</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(authenticate))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;登录错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果认证通过了,使用用户的id生成一个jwt,jwt存入ResponseResult进行返回</span></span><br><span class="line">        LoginUser loginUser = (LoginUser) authenticate.getPrincipal();</span><br><span class="line">        String userId = loginUser.getUser().getId().toString();</span><br><span class="line">        String jwt = JwtUtil.createJWT(userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把完整的用户信息存入redis中,用户的id作为key</span></span><br><span class="line">        redisCache.setCacheObject(<span class="string">&quot;login&quot;</span>+userId,loginUser);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把jwt存入map中</span></span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;token&quot;</span>,jwt);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(<span class="number">200</span>,<span class="string">&quot;登录成功&quot;</span>,map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登出的方法实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">logout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取SecurityContextHolder中的用户id</span></span><br><span class="line">       UsernamePasswordAuthenticationToken authentication =</span><br><span class="line">               (UsernamePasswordAuthenticationToken) SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        LoginUser loginUser = (LoginUser) authentication.getPrincipal();</span><br><span class="line">        Long userid = loginUser.getUser().getId();</span><br><span class="line">        System.out.println(userid);</span><br><span class="line">        <span class="comment">//删除redis中的这个key</span></span><br><span class="line">        redisCache.deleteObject(<span class="string">&quot;login&quot;</span>+userid);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(<span class="number">200</span>,<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-8-认证过滤器"><a href="#2-8-认证过滤器" class="headerlink" title="2.8 认证过滤器"></a>2.8 认证过滤器</h3><p>​    我们需要自定义一个过滤器，这个过滤器会去获取请求头中的token，对token进行解析取出其中的userid。</p>
<p>​    使用userid去redis中获取对应的LoginUser对象。</p>
<p>​    然后封装Authentication对象存入SecurityContextHolder</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//token校验过滤器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取token</span></span><br><span class="line">        String token = request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(token))&#123;</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解析token</span></span><br><span class="line">        String userid;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Claims claims = JwtUtil.parseJWT(token);</span><br><span class="line">            userid = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;token非法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从redis中获取用户信息</span></span><br><span class="line">        String redisKey=<span class="string">&quot;login&quot;</span>+ userid;</span><br><span class="line">        LoginUser loginUser = redisCache.getCacheObject(redisKey);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(loginUser))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存入SecurityContextHolder</span></span><br><span class="line">        <span class="comment">//TODO 获取权限信息封装到Authentication中（未做）</span></span><br><span class="line">        UsernamePasswordAuthenticationToken authenticationToken =</span><br><span class="line">                <span class="keyword">new</span> UsernamePasswordAuthenticationToken(loginUser,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(request,response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>然后在config的SecurityConfig类中的configure中加入</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把token校验过滤器添加到过滤器链中</span></span><br><span class="line">http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为原来那个密码校验是需要在数据库中密码前面加上&#123;noop&#125;才可以明文显示的,</span></span><br><span class="line"><span class="comment">// 默认用的是PasswordEncoder,密码格式为：&#123;id&#125;password .</span></span><br><span class="line"><span class="comment">// 所有这里换成了它自带的另一种加密密码方式</span></span><br><span class="line"><span class="comment">// 替换为BCryptPasswordEncoder</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//快捷键alt+insert然后选择Override Methods可以看到这里支持重写的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把它自带的另一种密码加密方式注入到spring容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把那个token校验过滤器自动注入spring中</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf 因为是前后端分离的项目，使用得关闭这个</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext 因为前后端分离Session就不管用了</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">/*.antMatchers(&quot;/hello&quot;).permitAll() 这个.permitall代表登没登录都可以访问*/</span></span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问,意思就是未登录的时候可以访问该接口，登录后就不能了。</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/login&quot;</span>).anonymous()</span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部需要鉴权认证，意思是任意用户认证成功后其他接口都能访问</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">        <span class="comment">//把token校验过滤器添加到过滤器链中</span></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个@Bean的作用就是注入到容器当中，然后可以在其他页面用 private 方法名;这种格式引入</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>2022个人目标</title>
    <url>/2022/02/15/2022%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><span id="more"></span>

<hr>
<table>
<thead>
<tr>
<th>名称</th>
<th>进度</th>
</tr>
</thead>
<tbody><tr>
<td>4月前拿下驾照</td>
<td><span style="color: green;">进行中</span></td>
</tr>
<tr>
<td>换工作</td>
<td><spna style="color: brown;">准备中</spna></td>
</tr>
<tr>
<td>到6月减肥40斤</td>
<td><span style="color: green;">进行中,已减<span style="color: red;">（15斤）</span></span></td>
</tr>
<tr>
<td>每日熟背30个单词</td>
<td><span style="color: green;">进行中</span></td>
</tr>
<tr>
<td>认真上网课</td>
<td><span style="color: blue;">未开学</span></td>
</tr>
</tbody></table>
<hr>
]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>Flex布局</title>
    <url>/2022/01/18/css/</url>
    <content><![CDATA[<p>Flex布局详解</p>
<span id="more"></span>
<h2 id="一、Flex布局是什么？"><a href="#一、Flex布局是什么？" class="headerlink" title="一、Flex布局是什么？"></a>一、Flex布局是什么？</h2><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</p>
<h2 id="二、容器的属性"><a href="#二、容器的属性" class="headerlink" title="二、容器的属性"></a>二、容器的属性</h2><hr>
<ul>
<li>flex-direction</li>
<li>flex-wrap</li>
<li>flex-flow</li>
<li>justify-content</li>
<li>align-items</li>
<li>align-content</li>
</ul>
<hr>
<h3 id="1-flex-direction"><a href="#1-flex-direction" class="headerlink" title="1.flex-direction"></a>1.flex-direction</h3><p>解释：容器内元素的排列方向(默认横向排列)</p>
<h4 id="1-1-flex-direction-row"><a href="#1-1-flex-direction-row" class="headerlink" title="1.1:flex-direction:row;"></a>1.1:flex-direction:row;</h4><p>解释：沿水平主轴让元素从左向右排列<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/1.png"></p>
<h4 id="1-2-flex-direction-column"><a href="#1-2-flex-direction-column" class="headerlink" title="1.2:flex-direction:column;"></a>1.2:flex-direction:column;</h4><p>解释：让元素沿垂直主轴从上到下垂直排列<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/2.png"></p>
<h4 id="1-3-flex-direction-row-reverse"><a href="#1-3-flex-direction-row-reverse" class="headerlink" title="1.3:flex-direction:row-reverse;"></a>1.3:flex-direction:row-reverse;</h4><p>解释：沿水平主轴让元素从右向左排列<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/3.png"></p>
<h4 id="1-4-flex-direction-column-reverse"><a href="#1-4-flex-direction-column-reverse" class="headerlink" title="1.4:flex-direction:column-reverse;"></a>1.4:flex-direction:column-reverse;</h4><p>解释：让元素沿垂直主轴从下到上垂直排列<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/4.png"><br><br/></p>
<hr>
<h3 id="2-flex-wrap"><a href="#2-flex-wrap" class="headerlink" title="2.flex-wrap"></a>2.flex-wrap</h3><p>解释：容器内元素的换行(默认不换行)</p>
<h4 id="2-1-flex-wrap-nowrap"><a href="#2-1-flex-wrap-nowrap" class="headerlink" title="2.1:flex-wrap: nowrap;"></a>2.1:flex-wrap: nowrap;</h4><p>解释：(默认)元素不换行,比如：一个div宽度100%，设置此属性，2个div宽度就自动变成各50%；<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/5.png"></p>
<h4 id="2-2-flex-wrap-wrap"><a href="#2-2-flex-wrap-wrap" class="headerlink" title="2.2:flex-wrap: wrap;"></a>2.2:flex-wrap: wrap;</h4><p>解释：元素换行,比如：一个div宽度100%，设置此属性，第二个div就在第二行了<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/6.png"></p>
<h4 id="2-3-flex-wrap-wrap-reverse"><a href="#2-3-flex-wrap-wrap-reverse" class="headerlink" title="2.3:flex-wrap: wrap-reverse;"></a>2.3:flex-wrap: wrap-reverse;</h4><p>解释：换行，第一行在下方。<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/7.png"><br><br/></p>
<hr>
<h3 id="3-flex-flow"><a href="#3-flex-flow" class="headerlink" title="3.flex-flow"></a>3.flex-flow</h3><p>解释：flex-direction和flex-wrap的简写，默认row nowrap<br>例子：flex-flow: row wrap;<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/8.png"><br><br/></p>
<hr>
<h3 id="4-justify-content"><a href="#4-justify-content" class="headerlink" title="4.justify-content"></a>4.justify-content</h3><p>解释：元素在主轴（页面）上的排列</p>
<h4 id="4-1：justify-content-center"><a href="#4-1：justify-content-center" class="headerlink" title="4.1：justify-content : center;"></a>4.1：justify-content : center;</h4><p>解释：元素在主轴（页面）上居中排列<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/9.png"></p>
<h4 id="4-2：justify-content-flex-start"><a href="#4-2：justify-content-flex-start" class="headerlink" title="4.2：justify-content : flex-start;"></a>4.2：justify-content : flex-start;</h4><p>解释：元素在主轴（页面）上由左或者上开始排列<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/10.png"></p>
<h4 id="4-3：justify-content-flex-end"><a href="#4-3：justify-content-flex-end" class="headerlink" title="4.3：justify-content : flex-end;"></a>4.3：justify-content : flex-end;</h4><p>解释：元素在主轴（页面）上由右或者下开始排列<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/11.png"></p>
<h4 id="4-4：justify-content-space-between"><a href="#4-4：justify-content-space-between" class="headerlink" title="4.4：justify-content :  space-between;"></a>4.4：justify-content :  space-between;</h4><p>解释：元素在主轴（页面）上左右两端或者上下两端开始排列<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/12.png"></p>
<h4 id="4-5：justify-content-space-around"><a href="#4-5：justify-content-space-around" class="headerlink" title="4.5：justify-content : space-around;"></a>4.5：justify-content : space-around;</h4><p>解释：每个元素两侧的间隔相等。所以，元素之间的间隔比元素与边框的间隔大一倍。<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/13.png"><br><br/></p>
<hr>
<h3 id="5-align-item"><a href="#5-align-item" class="headerlink" title="5.align-item"></a>5.align-item</h3><p>解释：元素在主轴（页面）当前行的横轴（纵轴）方向上的对齐方式</p>
<h4 id="5-1：align-items-flex-start"><a href="#5-1：align-items-flex-start" class="headerlink" title="5.1：align-items : flex-start;"></a>5.1：align-items : flex-start;</h4><p>解释：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界（靠上对齐）。<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/14.png"></p>
<h4 id="5-2：align-items-flex-end"><a href="#5-2：align-items-flex-end" class="headerlink" title="5.2：align-items : flex-end;"></a>5.2：align-items : flex-end;</h4><p>解释：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。（靠下对齐）<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/15.png"></p>
<h4 id="5-3：align-items-center"><a href="#5-3：align-items-center" class="headerlink" title="5.3：align-items : center;"></a>5.3：align-items : center;</h4><p>解释：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（居中对齐）<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/16.png"></p>
<h4 id="5-4：align-items-baseline"><a href="#5-4：align-items-baseline" class="headerlink" title="5.4：align-items : baseline;"></a>5.4：align-items : baseline;</h4><p>解释：如弹性盒子元素的行内轴与侧轴为同一条，则该值与’flex-start’等效。其它情况下，该值将参与基线对齐。（靠上对齐）<br><br/></p>
<hr>
<h3 id="6-align-content"><a href="#6-align-content" class="headerlink" title="6.align-content"></a>6.align-content</h3><p>解释：定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>
<h4 id="6-1：align-content-flex-start"><a href="#6-1：align-content-flex-start" class="headerlink" title="6.1：align-content: flex-start;"></a>6.1：align-content: flex-start;</h4><p>解释：元素位于容器的开头。各行向弹性盒容器的起始位置堆叠。<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/17.png"></p>
<h4 id="6-2：align-content-flex-end"><a href="#6-2：align-content-flex-end" class="headerlink" title="6.2：align-content: flex-end;"></a>6.2：align-content: flex-end;</h4><p>解释：元素位于容器的结尾。各行向弹性盒容器的结尾位置堆叠。<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/18.png"></p>
<h4 id="6-3：align-content-stretch"><a href="#6-3：align-content-stretch" class="headerlink" title="6.3：align-content: stretch;"></a>6.3：align-content: stretch;</h4><p>解释：默认值。元素被拉伸以适应容器。各行将会伸展以占用剩余的空间。如果剩余的空间是负数，该值等效于’flex-start’。<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/19.png"></p>
<h4 id="6-4：align-content-center"><a href="#6-4：align-content-center" class="headerlink" title="6.4：align-content: center;"></a>6.4：align-content: center;</h4><p>解释：元素位于容器的中心。各行向弹性盒容器的中间位置堆叠。<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/20.png"></p>
<h4 id="6-5：align-content-space-between"><a href="#6-5：align-content-space-between" class="headerlink" title="6.5：align-content: space-between;"></a>6.5：align-content: space-between;</h4><p>解释：元素位于各行之间留有空白的容器内。各行在弹性盒容器中平均分布。<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/21.png"></p>
<h4 id="6-6：align-content-space-around"><a href="#6-6：align-content-space-around" class="headerlink" title="6.6：align-content: space-around;"></a>6.6：align-content: space-around;</h4><p>解释：元素位于各行之前、之间、之后都留有空白的容器内。各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。如果剩余的空间是负数或弹性盒容器中只有一行，该值等效于’center’。<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/css/22.png"></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>一些实用链接</title>
    <url>/2022/01/12/hello-world/</url>
    <content><![CDATA[<h1 id="链接表"><a href="#链接表" class="headerlink" title="链接表"></a>链接表</h1><span id="more"></span>


<hr>
<table>
<thead>
<tr>
<th>名称</th>
<th>链接</th>
</tr>
</thead>
<tbody><tr>
<td>颜色代码表</td>
<td><a href="https://www.5tu.cn/colors/yansedaimabiao.html"><span style="color: #9708CC;">查看</span></a></td>
</tr>
<tr>
<td>CSS渐变背景</td>
<td><a href="https://webkul.github.io/coolhue/"><span style="color: #0E197D;">查看</span></a></td>
</tr>
<tr>
<td>阿里巴巴图标库</td>
<td><a href="https://www.iconfont.cn/"><span style="color: #DE4313;">查看</span></a></td>
</tr>
<tr>
<td>超清图片</td>
<td><a href="https://wallhaven.cc/"><span style="color: #002661;">查看</span></a></td>
</tr>
<tr>
<td>Redis-windows(提取码：wasd)</td>
<td><a href="https://pan.baidu.com/s/1ZgpvA_XEs15hKrMCbK_BmA"><span style="color: #5312D6;">查看</span></a></td>
</tr>
</tbody></table>
<hr>
]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>Burp Suite学习笔记</title>
    <url>/2022/01/15/burpsuite-01/</url>
    <content><![CDATA[<p>Burpsuite是用java编写的，用于web安全审计和扫描，它包含了许多工具，并为这些工具设计了许多接口，以促进加快攻击应用程序的过程。<br>所有的工具都共享一个能处理并显示HTTP 消息，持久性，认证，代理，日志，警报的一个强大的可扩展的框架。<br>安全人员可以用它进行网络安全审计，开发人员也可以使用该工具进行网站压测与攻击测试。检测web应用程序的安全问题。<br><strong>注意：</strong>该工具是由java编写的，所以使用前需要先安装java环境。</p>
<span id="more"></span>
<hr>
<h1 id="BurpSuite的安装与激活"><a href="#BurpSuite的安装与激活" class="headerlink" title="BurpSuite的安装与激活"></a>BurpSuite的安装与激活</h1><h2 id="一：安装"><a href="#一：安装" class="headerlink" title="一：安装"></a>一：安装</h2><h3 id="1：下载软件压缩包。"><a href="#1：下载软件压缩包。" class="headerlink" title="1：下载软件压缩包。"></a>1：下载软件压缩包。</h3><p>(链接：<a href="https://pan.baidu.com/s/10gSi17vH_wgeRj8170y_NA">https://pan.baidu.com/s/10gSi17vH_wgeRj8170y_NA</a> 提取码：lxyb)</p>
<h3 id="2：解压压缩包-然后进去文件夹中-找到如下两个文件-CN的是中文版-EN的是英文版-可以自行选择一款双击运行。"><a href="#2：解压压缩包-然后进去文件夹中-找到如下两个文件-CN的是中文版-EN的是英文版-可以自行选择一款双击运行。" class="headerlink" title="2：解压压缩包,然后进去文件夹中,找到如下两个文件,CN的是中文版,EN的是英文版,可以自行选择一款双击运行。"></a>2：解压压缩包,然后进去文件夹中,找到如下两个文件,CN的是中文版,EN的是英文版,可以自行选择一款双击运行。</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/1.png" width="35%" height="35%" />

<h3 id="3-点击下一个，不需要更改。"><a href="#3-点击下一个，不需要更改。" class="headerlink" title="3.点击下一个，不需要更改。"></a>3.点击下一个，不需要更改。</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/2.png" width="35%" height="35%" />

<h3 id="4-点击开始burp不需要更改。"><a href="#4-点击开始burp不需要更改。" class="headerlink" title="4.点击开始burp不需要更改。"></a>4.点击开始burp不需要更改。</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/3.png" width="35%" height="35%" />

<h3 id="5-由于第一次进入可能需要注册-找到帮助窗口下的许可证点击。"><a href="#5-由于第一次进入可能需要注册-找到帮助窗口下的许可证点击。" class="headerlink" title="5.由于第一次进入可能需要注册,找到帮助窗口下的许可证点击。"></a>5.由于第一次进入可能需要注册,找到帮助窗口下的许可证点击。</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/4.png" width="35%" height="35%" />

<h3 id="6-然后点击许可证密钥更新。"><a href="#6-然后点击许可证密钥更新。" class="headerlink" title="6.然后点击许可证密钥更新。"></a>6.然后点击许可证密钥更新。</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/5.png" width="35%" height="35%" />

<h3 id="7-进入如下界面"><a href="#7-进入如下界面" class="headerlink" title="7.进入如下界面."></a>7.进入如下界面.</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/6.png" width="35%" height="35%" />

<h3 id="8-然后找到注册机。"><a href="#8-然后找到注册机。" class="headerlink" title="8.然后找到注册机。"></a>8.然后找到注册机。</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/7.png" width="35%" height="35%" />

<h2 id="二：激活"><a href="#二：激活" class="headerlink" title="二：激活"></a>二：激活</h2><h3 id="1-找到安装时第七步的页面，然后打开文件夹中的注册机。"><a href="#1-找到安装时第七步的页面，然后打开文件夹中的注册机。" class="headerlink" title="1.找到安装时第七步的页面，然后打开文件夹中的注册机。"></a>1.找到安装时第七步的页面，然后打开文件夹中的注册机。</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/6.png" width="35%" height="35%" />
<img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/8.png" width="35%" height="35%" />

<h3 id="2-然后把注册机license中的所有内容复制然后粘贴到如下页面，然后点击下一个。"><a href="#2-然后把注册机license中的所有内容复制然后粘贴到如下页面，然后点击下一个。" class="headerlink" title="2.然后把注册机license中的所有内容复制然后粘贴到如下页面，然后点击下一个。"></a>2.然后把注册机license中的所有内容复制然后粘贴到如下页面，然后点击下一个。</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/9.png" width="35%" height="35%" />

<h3 id="3-选择手动激活。"><a href="#3-选择手动激活。" class="headerlink" title="3.选择手动激活。"></a>3.选择手动激活。</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/10.png" width="35%" height="35%" />

<h3 id="4-把请求复制到注册机的Activation-Request中。"><a href="#4-把请求复制到注册机的Activation-Request中。" class="headerlink" title="4.把请求复制到注册机的Activation Request中。"></a>4.把请求复制到注册机的Activation Request中。</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/11.png" width="35%" height="35%" />

<h3 id="5-然后会自动生成Activation-Response-把自动生成的内容复制粘贴到如下区域-然后点击下一步。"><a href="#5-然后会自动生成Activation-Response-把自动生成的内容复制粘贴到如下区域-然后点击下一步。" class="headerlink" title="5.然后会自动生成Activation Response,把自动生成的内容复制粘贴到如下区域,然后点击下一步。"></a>5.然后会自动生成Activation Response,把自动生成的内容复制粘贴到如下区域,然后点击下一步。</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/12.png" width="35%" height="35%" />

<h3 id="6-出现如下图证明注册成功了，就可以使用软件的所有功能了。"><a href="#6-出现如下图证明注册成功了，就可以使用软件的所有功能了。" class="headerlink" title="6.出现如下图证明注册成功了，就可以使用软件的所有功能了。"></a>6.出现如下图证明注册成功了，就可以使用软件的所有功能了。</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/13.png" width="35%" height="35%" />

<h1 id="BurpSuite的流量抓取"><a href="#BurpSuite的流量抓取" class="headerlink" title="BurpSuite的流量抓取"></a>BurpSuite的流量抓取</h1><h2 id="一：流量抓取"><a href="#一：流量抓取" class="headerlink" title="一：流量抓取"></a>一：流量抓取</h2><h3 id="1-找到Proxy中的Options-查看运行中的接口ip和端口"><a href="#1-找到Proxy中的Options-查看运行中的接口ip和端口" class="headerlink" title="1.找到Proxy中的Options,查看运行中的接口ip和端口"></a>1.找到Proxy中的Options,查看运行中的接口ip和端口</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/burp-liuliang/1.png" width="35%" height="35%" />

<h3 id="2-找到浏览器的设置，找到代理设置（浏览器不同-设置的地方可能不一样）把上面运行中的IP和端口加入如下图列表中"><a href="#2-找到浏览器的设置，找到代理设置（浏览器不同-设置的地方可能不一样）把上面运行中的IP和端口加入如下图列表中" class="headerlink" title="2.找到浏览器的设置，找到代理设置（浏览器不同,设置的地方可能不一样）把上面运行中的IP和端口加入如下图列表中"></a>2.找到浏览器的设置，找到代理设置（浏览器不同,设置的地方可能不一样）把上面运行中的IP和端口加入如下图列表中</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/burp-liuliang/2.png" width="35%" height="35%" />

<h3 id="3-把浏览器设置为代理服务器"><a href="#3-把浏览器设置为代理服务器" class="headerlink" title="3.把浏览器设置为代理服务器"></a>3.把浏览器设置为代理服务器</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/burp-liuliang/3.png" width="35%" height="35%" />

<h3 id="4-然后找到Proxy中的intercept点击拦截请求"><a href="#4-然后找到Proxy中的intercept点击拦截请求" class="headerlink" title="4.然后找到Proxy中的intercept点击拦截请求"></a>4.然后找到Proxy中的intercept点击拦截请求</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/burp-liuliang/4.png" width="35%" height="35%" />

<h3 id="5-然后打开浏览器随便找个页面刷新，你会发现页面并没有加载，而是被burpsuite拦截了"><a href="#5-然后打开浏览器随便找个页面刷新，你会发现页面并没有加载，而是被burpsuite拦截了" class="headerlink" title="5.然后打开浏览器随便找个页面刷新，你会发现页面并没有加载，而是被burpsuite拦截了."></a>5.然后打开浏览器随便找个页面刷新，你会发现页面并没有加载，而是被burpsuite拦截了.</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/burp-liuliang/5.png" width="35%" height="35%" />

<h3 id="6-如果需要加载页面，点击发送，一直点完，也就加载完页面了。"><a href="#6-如果需要加载页面，点击发送，一直点完，也就加载完页面了。" class="headerlink" title="6.如果需要加载页面，点击发送，一直点完，也就加载完页面了。"></a>6.如果需要加载页面，点击发送，一直点完，也就加载完页面了。</h3><h2 id="二：证书配置"><a href="#二：证书配置" class="headerlink" title="二：证书配置"></a>二：证书配置</h2><h3 id="1-不过在抓取https页面时会提示有风险，这时候就需要去配置证书了，来消取该风险。"><a href="#1-不过在抓取https页面时会提示有风险，这时候就需要去配置证书了，来消取该风险。" class="headerlink" title="1.不过在抓取https页面时会提示有风险，这时候就需要去配置证书了，来消取该风险。"></a>1.不过在抓取https页面时会提示有风险，这时候就需要去配置证书了，来消取该风险。</h3><ul>
<li>找到Proxy中的Options</li>
<li>点击代理监听器下的<strong>导入/导出CA证书按钮</strong></li>
<li>出口选择<strong>DER格式的证书</strong></li>
<li>点击下一步</li>
</ul>
<img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/burp-liuliang/6.png" width="35%" height="35%" />

<h3 id="2-点击文件选择。"><a href="#2-点击文件选择。" class="headerlink" title="2.点击文件选择。"></a>2.点击文件选择。</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/burp-liuliang/7.png" width="35%" height="35%" />

<h3 id="3-随便起个文件名保存。"><a href="#3-随便起个文件名保存。" class="headerlink" title="3.随便起个文件名保存。"></a>3.随便起个文件名保存。</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/burp-liuliang/8.png" width="35%" height="35%" />

<h3 id="4-打开浏览器，设置中找到证书配置，点击受信任的根证书颁发机构，点击导入。"><a href="#4-打开浏览器，设置中找到证书配置，点击受信任的根证书颁发机构，点击导入。" class="headerlink" title="4.打开浏览器，设置中找到证书配置，点击受信任的根证书颁发机构，点击导入。"></a>4.打开浏览器，设置中找到证书配置，点击受信任的根证书颁发机构，点击导入。</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/burp-liuliang/9.png" width="35%" height="35%" />

<h3 id="5-找到刚才导出的DER格式的证书，然后选择，点击打开"><a href="#5-找到刚才导出的DER格式的证书，然后选择，点击打开" class="headerlink" title="5.找到刚才导出的DER格式的证书，然后选择，点击打开"></a>5.找到刚才导出的DER格式的证书，然后选择，点击打开</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/burp-liuliang/10.png" width="35%" height="35%" />

<h3 id="6-然后都默认下一步就行"><a href="#6-然后都默认下一步就行" class="headerlink" title="6.然后都默认下一步就行"></a>6.然后都默认下一步就行</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/burp-liuliang/11.png" width="35%" height="35%" />

<h3 id="7-这条就是刚才导入成功的证书。"><a href="#7-这条就是刚才导入成功的证书。" class="headerlink" title="7.这条就是刚才导入成功的证书。"></a>7.这条就是刚才导入成功的证书。</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/burpsuite/burp-liuliang/12.png" width="35%" height="35%" />

<h3 id="8-然后在去试着抓取一下就会发现页面不会提示有风险了。"><a href="#8-然后在去试着抓取一下就会发现页面不会提示有风险了。" class="headerlink" title="8.然后在去试着抓取一下就会发现页面不会提示有风险了。"></a>8.然后在去试着抓取一下就会发现页面不会提示有风险了。</h3>]]></content>
      <categories>
        <category>burpsuite</category>
      </categories>
      <tags>
        <tag>burpsuite</tag>
      </tags>
  </entry>
  <entry>
    <title>java环境变量</title>
    <url>/2022/01/14/java-day01/</url>
    <content><![CDATA[<p>这是关于java环境变量安装的一些步骤</p>
<span id="more"></span>
<h1 id="jdk在windows和linux中的安装步骤"><a href="#jdk在windows和linux中的安装步骤" class="headerlink" title="jdk在windows和linux中的安装步骤"></a>jdk在windows和linux中的安装步骤</h1><h2 id="一：Windows"><a href="#一：Windows" class="headerlink" title="一：Windows"></a>一：Windows</h2><h3 id="1-jdk安装包"><a href="#1-jdk安装包" class="headerlink" title="1.jdk安装包"></a>1.jdk安装包</h3><p>(链接：<a href="https://pan.baidu.com/s/17BamvwOmnVrJiWeQloD0cw">https://pan.baidu.com/s/17BamvwOmnVrJiWeQloD0cw</a> 提取码：lxy1)</p>
<h3 id="2-打开安装包，除了安装路径以外其他的可以默认下一步。"><a href="#2-打开安装包，除了安装路径以外其他的可以默认下一步。" class="headerlink" title="2.打开安装包，除了安装路径以外其他的可以默认下一步。"></a>2.打开安装包，除了安装路径以外其他的可以默认下一步。</h3><h3 id="3-找到桌面（此电脑）或（计算机）图标，点击右键，点击属性："><a href="#3-找到桌面（此电脑）或（计算机）图标，点击右键，点击属性：" class="headerlink" title="3.找到桌面（此电脑）或（计算机）图标，点击右键，点击属性："></a>3.找到桌面（此电脑）或（计算机）图标，点击右键，点击属性：</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/java-images/java-jdk.png" width="35%" height="35%" />

<h3 id="4-找到高级系统设置，点击环境变量"><a href="#4-找到高级系统设置，点击环境变量" class="headerlink" title="4.找到高级系统设置，点击环境变量:"></a>4.找到高级系统设置，点击环境变量:</h3><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/java-images/java-jdk-1.png" width="35%" height="35%" />

<h3 id="5-在系统变量中点击新建"><a href="#5-在系统变量中点击新建" class="headerlink" title="5.在系统变量中点击新建"></a>5.在系统变量中点击新建</h3><p>变量名输入 ： <strong>JAVA_HOME</strong><br>变量值： 输入你安装jdk的根目录（注意：下图是我的安装目录）<br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/java-images/java-jdk-2.png" width="35%" height="35%" /><br><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/java-images/java-jdk-3.png" width="35%" height="35%" /></p>
<h3 id="6-在系统变量中找到path点击编辑："><a href="#6-在系统变量中找到path点击编辑：" class="headerlink" title="6.在系统变量中找到path点击编辑："></a>6.在系统变量中找到path点击编辑：</h3><p>在最下面加入： <strong>%JAVA_HOME%\bin</strong></p>
<img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/java-images/java-jdk-4.png" width="35%" height="35%" />
<img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/java-images/java-jdk-5.png" width="35%" height="35%" />

<h3 id="7-键盘：-win-r-输入cmd-点击确定，分别输入以下命令查看是否安装成功"><a href="#7-键盘：-win-r-输入cmd-点击确定，分别输入以下命令查看是否安装成功" class="headerlink" title="7.键盘： win+r ,输入cmd,点击确定，分别输入以下命令查看是否安装成功"></a>7.键盘： win+r ,输入cmd,点击确定，分别输入以下命令查看是否安装成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java</span><br><span class="line">javac</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>
<img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/java-images/java-java.png" width="35%" height="35%" />
<img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/java-images/java-javac.png" width="35%" height="35%" />
<img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/java-images/java-java-version.png" width="35%" height="35%" />

<h2 id="二：linux"><a href="#二：linux" class="headerlink" title="二：linux"></a>二：linux</h2><h3 id="1-jdk安装包（linux版）"><a href="#1-jdk安装包（linux版）" class="headerlink" title="1.jdk安装包（linux版）"></a>1.jdk安装包（linux版）</h3><p>(链接：<a href="https://pan.baidu.com/s/1qOSaDenglNK9ds1qcpsO3A">https://pan.baidu.com/s/1qOSaDenglNK9ds1qcpsO3A</a> 提取码：lxyx)</p>
<h3 id="2-如果不是root用户，需要切换到root用户下，指令如下："><a href="#2-如果不是root用户，需要切换到root用户下，指令如下：" class="headerlink" title="2.如果不是root用户，需要切换到root用户下，指令如下："></a>2.如果不是root用户，需要切换到root用户下，指令如下：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure>
<p><strong>原因</strong>：如果你不是配置在root用户下，而是在A（非root）用户下配置的环境变量，那么你切换到B（非root）用户下将没有此环境变量，配置在root用户下可以方便很多，当然你有特殊需求的话，可以随便配。</p>
<h3 id="3-将该压缩包放到-usr-local-jdk目录下，jdk目录需要自己手动创建，也可以叫java，名字自己随意取，然后解压该压缩包，输入如下指令："><a href="#3-将该压缩包放到-usr-local-jdk目录下，jdk目录需要自己手动创建，也可以叫java，名字自己随意取，然后解压该压缩包，输入如下指令：" class="headerlink" title="3.将该压缩包放到/usr/local/jdk目录下，jdk目录需要自己手动创建，也可以叫java，名字自己随意取，然后解压该压缩包，输入如下指令："></a>3.将该压缩包放到/usr/local/jdk目录下，jdk目录需要自己手动创建，也可以叫java，名字自己随意取，然后解压该压缩包，输入如下指令：</h3><p>可以试着直接拖到这个目录中，如果不能，可以下载xshell6，里面有ftp文件传输面版<br>（链接：<a href="https://pan.baidu.com/s/1OCeaKUuvdSjRpT-VPXvAbw">https://pan.baidu.com/s/1OCeaKUuvdSjRpT-VPXvAbw</a> 提取码：lxya）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u181-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="4-配置环境变量，输入以下指令打开配置文件："><a href="#4-配置环境变量，输入以下指令打开配置文件：" class="headerlink" title="4.配置环境变量，输入以下指令打开配置文件："></a>4.配置环境变量，输入以下指令打开配置文件：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>
<p>然后在文件尾部添加如下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk/jdk1.8.0_181</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=$:CLASSPATH:<span class="variable">$JAVA_HOME</span>/lib/</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：第一行的JAVA_HOME=/usr/local/jdk/jdk1.8.0_181<br>JAVA_HOME=后面的路径是你jdk压缩包<strong>解压后</strong>存放的路径，你解压到哪里了就写哪里。</p>
<h3 id="5-编辑完之后保存并退出"><a href="#5-编辑完之后保存并退出" class="headerlink" title="5.编辑完之后保存并退出"></a>5.编辑完之后保存并退出</h3><p>按ESC键跳到命令模式，然后：</p>
<ul>
<li>:w - 保存文件，不退出vim。</li>
<li>:w file - 将修改另外保存到file中，不退出vim。</li>
<li>:w! - 强制保存，不退出vim 。</li>
<li>:wq - 保存文件，退出vim。</li>
<li>:wq! - 强制保存文件，退出vim。</li>
<li>:q - 不保存文件，退出vim。</li>
<li>:q! - 不保存文件，强制退出vim。</li>
<li>:e! - 放弃所有修改，从上次保存文件开始再编辑。</li>
</ul>
<h3 id="6-然后输入以下指令-刷新环境配置使其生效："><a href="#6-然后输入以下指令-刷新环境配置使其生效：" class="headerlink" title="6.然后输入以下指令,刷新环境配置使其生效："></a>6.然后输入以下指令,刷新环境配置使其生效：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="7-输入命令查看是否配置成功"><a href="#7-输入命令查看是否配置成功" class="headerlink" title="7.输入命令查看是否配置成功"></a>7.输入命令查看是否配置成功</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>出现如下图证明配置成功</p>
<img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/java-images/java-linux.png" width="50%" height="35%" />]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>数据恢复工具</title>
    <url>/2022/01/18/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p><strong>WinFR界面版</strong></p>
<span id="more"></span>

<h2 id="第一步：下载、安装"><a href="#第一步：下载、安装" class="headerlink" title="第一步：下载、安装"></a>第一步：下载、安装</h2><p>在官网下载WinFR界面版，下载地址：</p>
<p><a href="https://www.disktool.cn/recovery/winfr.html">https://www.disktool.cn/recovery/winfr.html</a></p>
<p>下载后直接点击【下一步】直到安装完成即可，然后运行软件，就是第二步的数据恢复界面。</p>
<p><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/shujuhuifu/1.png"></p>
<h2 id="第二步：选择需要恢复的分区。"><a href="#第二步：选择需要恢复的分区。" class="headerlink" title="第二步：选择需要恢复的分区。"></a>第二步：选择需要恢复的分区。</h2><p>在下图中选择你丢失文件所在的分区，然后选择把恢复后的文件存放在什么位置，扫描方式和很多收费软件类似，都支持【快速扫描】和【深度扫描】，个人建议是先用【快速扫描】看能否找到丢失的文件，如果没有找到再用【深度扫描】。</p>
<p><img src="https://8888888888888888888888888888888888.oss-cn-beijing.aliyuncs.com/shujuhuifu/2.png"></p>
]]></content>
      <categories>
        <category>数据恢复工具</category>
      </categories>
      <tags>
        <tag>数据恢复工具</tag>
      </tags>
  </entry>
  <entry>
    <title>文章一（各种格式的示例学习）</title>
    <url>/2022/01/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E9%81%8D%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="雷哥文章一"><a href="#雷哥文章一" class="headerlink" title="雷哥文章一"></a>雷哥文章一</h1><span id="more"></span>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><ul>
<li>列表一</li>
<li>列表二<br>  a 子列表一</li>
<li>列表三<br>  a 子列表一<br>  b 子列表二<br><a href="http://www.baidu.com/">百度</a><br><img src="https://addimagesaddress-1308114002.cos.ap-beijing.myqcloud.com/1638439047317.png" alt="图片"><br>虚线分割用三个-</li>
</ul>
<hr>
<p>斜体：<em>一个星号斜体</em><br>加粗：<strong>两个星号加粗</strong></p>
<p>引用代码单行用一个：<code>&lt;html&gt;&lt;/html&gt;</code><br>引用代码多行用三个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;title&gt;俺是标题&lt;/title&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">		&lt;div&gt;</span><br><span class="line">			&lt;h1&gt;掉毛&lt;/h1&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>练习</category>
      </categories>
      <tags>
        <tag>练习</tag>
      </tags>
  </entry>
</search>
